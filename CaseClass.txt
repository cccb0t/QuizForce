public with sharing class DealerActionCaseService {

    public class DealerActionCaseDTO {
        public Id id;
        public String subject;
        public String description;
        public String status;
        public DateTime createdDate;

        public List<CommentDTO> comments = new List<CommentDTO>();
        public List<AttachmentDTO> attachments = new List<AttachmentDTO>();
        public List<FileDTO> files = new List<FileDTO>();
    }

    public class CommentDTO {
        public Id id;
        public String body;
        public DateTime createdDate;
    }

    public class AttachmentDTO {
        public Id id;
        public String name;
        public String contentType;
        public Integer bodyLength;
    }

    public class FileDTO {
        public Id id;
        public String title;
        public String fileType;
        public Integer contentSize;
    }

    public static String exportDealerActionCases(Date sinceDate) {
        // Step 1: Identify the first time each case was set to Dealer Action Required
        Map<Id, Datetime> caseIdToFirstDealerAction = new Map<Id, Datetime>();

        for (CaseHistory ch : [
            SELECT CaseId, Field, NewValue, CreatedDate
            FROM CaseHistory
            WHERE Field = 'Status' AND CreatedDate >= :sinceDate
        ]) {
            if (String.valueOf(ch.NewValue) == 'Dealer Action Required') {
                if (!caseIdToFirstDealerAction.containsKey(ch.CaseId) ||
                    ch.CreatedDate < caseIdToFirstDealerAction.get(ch.CaseId)) {
                    caseIdToFirstDealerAction.put(ch.CaseId, ch.CreatedDate);
                }
            }
        }

        if (caseIdToFirstDealerAction.isEmpty()) {
            return '[]';
        }

        Set<Id> caseIds = caseIdToFirstDealerAction.keySet();

        // Step 2: Load base Case records
        Map<Id, Case> caseMap = new Map<Id, Case>([
            SELECT Id, Subject, Description, Status, CreatedDate
            FROM Case
            WHERE Id IN :caseIds
        ]);

        // Step 3: Comments (created anytime up to 10 minutes after the status change)
        Map<Id, List<CommentDTO>> commentsByCaseId = new Map<Id, List<CommentDTO>>();
        for (CaseComment cc : [
            SELECT Id, ParentId, CommentBody, CreatedDate
            FROM CaseComment
            WHERE ParentId IN :caseIds
        ]) {
            Datetime changeTime = caseIdToFirstDealerAction.get(cc.ParentId);
            if (changeTime != null) {
                Datetime windowEnd = changeTime.addMinutes(10);
                if (cc.CreatedDate <= windowEnd) {
                    CommentDTO dto = new CommentDTO();
                    dto.id = cc.Id;
                    dto.body = cc.CommentBody;
                    dto.createdDate = cc.CreatedDate;

                    if (!commentsByCaseId.containsKey(cc.ParentId)) {
                        commentsByCaseId.put(cc.ParentId, new List<CommentDTO>());
                    }
                    commentsByCaseId.get(cc.ParentId).add(dto);
                }
            }
        }

        // Step 4: Attachments (created on or before status change)
        Map<Id, List<AttachmentDTO>> attachmentsByCaseId = new Map<Id, List<AttachmentDTO>>();
        for (Attachment att : [
            SELECT Id, ParentId, Name, ContentType, BodyLength, CreatedDate
            FROM Attachment
            WHERE ParentId IN :caseIds
        ]) {
            Datetime changeTime = caseIdToFirstDealerAction.get(att.ParentId);
            if (changeTime != null && att.CreatedDate <= changeTime) {
                AttachmentDTO dto = new AttachmentDTO();
                dto.id = att.Id;
                dto.name = att.Name;
                dto.contentType = att.ContentType;
                dto.bodyLength = att.BodyLength;

                if (!attachmentsByCaseId.containsKey(att.ParentId)) {
                    attachmentsByCaseId.put(att.ParentId, new List<AttachmentDTO>());
                }
                attachmentsByCaseId.get(att.ParentId).add(dto);
            }
        }

        // Step 5: Files (using ContentVersion.CreatedDate as proxy)
        Map<Id, List<FileDTO>> filesByCaseId = new Map<Id, List<FileDTO>>();

        List<ContentDocumentLink> links = [
            SELECT ContentDocumentId, LinkedEntityId
            FROM ContentDocumentLink
            WHERE LinkedEntityId IN :caseIds
        ];

        // Build docId â†’ caseId map
        Map<Id, Id> docIdToCaseId = new Map<Id, Id>();
        for (ContentDocumentLink link : links) {
            docIdToCaseId.put(link.ContentDocumentId, link.LinkedEntityId);
        }

        // Fetch ContentDocument and ContentVersion
        Map<Id, ContentDocument> docMap = new Map<Id, ContentDocument>([
            SELECT Id, LatestPublishedVersionId, Title, FileType
            FROM ContentDocument
            WHERE Id IN :docIdToCaseId.keySet()
        ]);

        Set<Id> versionIds = new Set<Id>();
        for (ContentDocument doc : docMap.values()) {
            if (doc.LatestPublishedVersionId != null) {
                versionIds.add(doc.LatestPublishedVersionId);
            }
        }

        Map<Id, ContentVersion> versionMap = new Map<Id, ContentVersion>([
            SELECT Id, ContentDocumentId, Title, FileType, ContentSize, CreatedDate
            FROM ContentVersion
            WHERE Id IN :versionIds
        ]);

        for (ContentVersion v : versionMap.values()) {
            Id caseId = docIdToCaseId.get(v.ContentDocumentId);
            Datetime changeTime = caseIdToFirstDealerAction.get(caseId);
            if (caseId != null && changeTime != null && v.CreatedDate <= changeTime) {
                FileDTO dto = new FileDTO();
                dto.id = v.Id;
                dto.title = v.Title;
                dto.fileType = v.FileType;
                dto.contentSize = v.ContentSize;

                if (!filesByCaseId.containsKey(caseId)) {
                    filesByCaseId.put(caseId, new List<FileDTO>());
                }
                filesByCaseId.get(caseId).add(dto);
            }
        }

        // Step 6: Assemble DTOs
        List<DealerActionCaseDTO> results = new List<DealerActionCaseDTO>();

        for (Id caseId : caseIds) {
            Case c = caseMap.get(caseId);
            if (c == null) continue;

            DealerActionCaseDTO dto = new DealerActionCaseDTO();
            dto.id = c.Id;
            dto.subject = c.Subject;
            dto.description = c.Description;
            dto.status = c.Status;
            dto.createdDate = c.CreatedDate;

            if (commentsByCaseId.containsKey(caseId)) {
                dto.comments.addAll(commentsByCaseId.get(caseId));
            }

            if (attachmentsByCaseId.containsKey(caseId)) {
                dto.attachments.addAll(attachmentsByCaseId.get(caseId));
            }

            if (filesByCaseId.containsKey(caseId)) {
                dto.files.addAll(filesByCaseId.get(caseId));
            }

            results.add(dto);
        }

        return JSON.serializePretty(results);
    }
}
