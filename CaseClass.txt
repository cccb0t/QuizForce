public with sharing class DealerActionCaseService {

    public class DealerActionCaseDTO {
        public Id id;
        public String subject;
        public String description;
        public String status;
        public DateTime createdDate;

        public List<CommentDTO> comments = new List<CommentDTO>();
        public List<AttachmentDTO> attachments = new List<AttachmentDTO>();
        public List<FileDTO> files = new List<FileDTO>();

        public class CommentDTO {
            public Id id;
            public String body;
            public DateTime createdDate;
        }

        public class AttachmentDTO {
            public Id id;
            public String name;
            public String contentType;
            public Integer bodyLength;
        }

        public class FileDTO {
            public Id id;
            public String title;
            public String fileType;
            public Integer contentSize;
        }
    }

    public static String exportDealerActionCases(Date sinceDate) {
        // STEP 1: Track first Dealer Action Required status change per case
        Map<Id, Datetime> caseIdToFirstDealerAction = new Map<Id, Datetime>();

        for (CaseHistory ch : [
            SELECT CaseId, Field, NewValue, CreatedDate
            FROM CaseHistory
            WHERE Field = 'Status' AND CreatedDate >= :sinceDate
        ]) {
            if (String.valueOf(ch.NewValue) == 'Dealer Action Required') {
                if (!caseIdToFirstDealerAction.containsKey(ch.CaseId) ||
                    ch.CreatedDate < caseIdToFirstDealerAction.get(ch.CaseId)) {
                    caseIdToFirstDealerAction.put(ch.CaseId, ch.CreatedDate);
                }
            }
        }

        if (caseIdToFirstDealerAction.isEmpty()) {
            return '[]';
        }

        Set<Id> caseIds = caseIdToFirstDealerAction.keySet();

        // STEP 2: Load base Case data
        Map<Id, Case> caseMap = new Map<Id, Case>([
            SELECT Id, Subject, Description, Status, CreatedDate
            FROM Case
            WHERE Id IN :caseIds
        ]);

        // STEP 3: Case Comments with 10-min grace window
        Map<Id, List<DealerActionCaseDTO.CommentDTO>> commentsByCaseId = new Map<Id, List<DealerActionCaseDTO.CommentDTO>>();
        for (CaseComment cc : [
            SELECT Id, ParentId, CommentBody, CreatedDate
            FROM CaseComment
            WHERE ParentId IN :caseIds
        ]) {
            Datetime changeTime = caseIdToFirstDealerAction.get(cc.ParentId);
            if (changeTime != null && cc.CreatedDate <= changeTime.addMinutes(10)) {
                DealerActionCaseDTO.CommentDTO dto = new DealerActionCaseDTO.CommentDTO();
                dto.id = cc.Id;
                dto.body = cc.CommentBody;
                dto.createdDate = cc.CreatedDate;

                if (!commentsByCaseId.containsKey(cc.ParentId)) {
                    commentsByCaseId.put(cc.ParentId, new List<DealerActionCaseDTO.CommentDTO>());
                }
                commentsByCaseId.get(cc.ParentId).add(dto);
            }
        }

        // STEP 4: Attachments on or before status change
        Map<Id, List<DealerActionCaseDTO.AttachmentDTO>> attachmentsByCaseId = new Map<Id, List<DealerActionCaseDTO.AttachmentDTO>>();
        for (Attachment att : [
            SELECT Id, ParentId, Name, ContentType, BodyLength, CreatedDate
            FROM Attachment
            WHERE ParentId IN :caseIds
        ]) {
            Datetime changeTime = caseIdToFirstDealerAction.get(att.ParentId);
            if (changeTime != null && att.CreatedDate <= changeTime) {
                DealerActionCaseDTO.AttachmentDTO dto = new DealerActionCaseDTO.AttachmentDTO();
                dto.id = att.Id;
                dto.name = att.Name;
                dto.contentType = att.ContentType;
                dto.bodyLength = att.BodyLength;

                if (!attachmentsByCaseId.containsKey(att.ParentId)) {
                    attachmentsByCaseId.put(att.ParentId, new List<DealerActionCaseDTO.AttachmentDTO>());
                }
                attachmentsByCaseId.get(att.ParentId).add(dto);
            }
        }

        // STEP 5: Files added on or before status change
        Map<Id, List<DealerActionCaseDTO.FileDTO>> filesByCaseId = new Map<Id, List<DealerActionCaseDTO.FileDTO>>();

        List<ContentDocumentLink> links = [
            SELECT ContentDocumentId, LinkedEntityId, CreatedDate
            FROM ContentDocumentLink
            WHERE LinkedEntityId IN :caseIds
        ];

        Set<Id> docIds = new Set<Id>();
        Map<Id, List<Id>> caseIdToDocIds = new Map<Id, List<Id>>();

        for (ContentDocumentLink link : links) {
            Datetime changeTime = caseIdToFirstDealerAction.get(link.LinkedEntityId);
            if (changeTime != null && link.CreatedDate <= changeTime) {
                docIds.add(link.ContentDocumentId);

                if (!caseIdToDocIds.containsKey(link.LinkedEntityId)) {
                    caseIdToDocIds.put(link.LinkedEntityId, new List<Id>());
                }
                caseIdToDocIds.get(link.LinkedEntityId).add(link.ContentDocumentId);
            }
        }

        Map<Id, ContentDocument> docMap = new Map<Id, ContentDocument>([
            SELECT Id, LatestPublishedVersionId, Title, FileType
            FROM ContentDocument
            WHERE Id IN :docIds
        ]);

        Set<Id> versionIds = new Set<Id>();
        for (ContentDocument doc : docMap.values()) {
            if (doc.LatestPublishedVersionId != null) {
                versionIds.add(doc.LatestPublishedVersionId);
            }
        }

        Map<Id, ContentVersion> versionMap = new Map<Id, ContentVersion>([
            SELECT Id, ContentDocumentId, Title, FileType, ContentSize
            FROM ContentVersion
            WHERE Id IN :versionIds
        ]);

        for (Id caseId : caseIds) {
            List<Id> linkedDocIds = caseIdToDocIds.get(caseId);
            if (linkedDocIds != null) {
                List<DealerActionCaseDTO.FileDTO> fileList = new List<DealerActionCaseDTO.FileDTO>();
                for (Id docId : linkedDocIds) {
                    ContentDocument doc = docMap.get(docId);
                    if (doc != null) {
                        ContentVersion v = versionMap.get(doc.LatestPublishedVersionId);
                        if (v != null) {
                            DealerActionCaseDTO.FileDTO dto = new DealerActionCaseDTO.FileDTO();
                            dto.id = v.Id;
                            dto.title = v.Title;
                            dto.fileType = v.FileType;
                            dto.contentSize = v.ContentSize;
                            fileList.add(dto);
                        }
                    }
                }
                filesByCaseId.put(caseId, fileList);
            }
        }

        // STEP 6: Assemble final DTOs
        List<DealerActionCaseDTO> result = new List<DealerActionCaseDTO>();

        for (Id caseId : caseIds) {
            Case c = caseMap.get(caseId);
            if (c == null) continue;

            DealerActionCaseDTO dto = new DealerActionCaseDTO();
            dto.id = c.Id;
            dto.subject = c.Subject;
            dto.description = c.Description;
            dto.status = c.Status;
            dto.createdDate = c.CreatedDate;

            if (commentsByCaseId.containsKey(caseId)) {
                dto.comments.addAll(commentsByCaseId.get(caseId));
            }

            if (attachmentsByCaseId.containsKey(caseId)) {
                dto.attachments.addAll(attachmentsByCaseId.get(caseId));
            }

            if (filesByCaseId.containsKey(caseId)) {
                dto.files.addAll(filesByCaseId.get(caseId));
            }

            result.add(dto);
        }

        return JSON.serializePretty(result);
    }
}
