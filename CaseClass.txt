public with sharing class DealerActionCaseService {

    @InvocableMethod(label='Export Dealer Action Cases as JSON')
    public static List<ExportResponse> exportCases(List<ExportRequest> requests) {
        if (requests == null || requests.isEmpty() || requests[0].sinceDays == null) {
            return new List<ExportResponse>{ new ExportResponse('[]') };
        }

        Date sinceDate = Date.today().addDays(-requests[0].sinceDays);
        String json = exportDealerActionCases(sinceDate);
        return new List<ExportResponse>{ new ExportResponse(json) };
    }

    public class ExportRequest {
        @InvocableVariable(label='Since Days')
        public Integer sinceDays;
    }

    public class ExportResponse {
        @InvocableVariable(label='Exported JSON')
        public String jsonOutput;
        public ExportResponse(String json) {
            this.jsonOutput = json;
        }
    }

    public class DealerActionCaseDTO {
        public Id id;
        public String subject;
        public String description;
        public String status;
        public DateTime createdDate;

        public String statusChangeOldValue;
        public String statusChangeNewValue;
        public DateTime statusChangeDate;

        public List<CommentDTO> comments = new List<CommentDTO>();
        public List<AttachmentDTO> attachments = new List<AttachmentDTO>();
        public List<FileDTO> files = new List<FileDTO>();
    }

    public class CommentDTO {
        public Id id;
        public String body;
        public DateTime createdDate;
    }

    public class AttachmentDTO {
        public Id id;
        public String name;
        public String contentType;
        public Integer bodyLength;
    }

    public class FileDTO {
        public Id id;
        public String title;
        public String fileType;
        public Integer contentSize;
    }

    public class StatusChangeMetadata {
        public String oldValue;
        public String newValue;
        public Datetime timestamp;
    }

    public static String exportDealerActionCases(Date sinceDate) {
        // Step 1: Query case history with sinceDate filter
        List<CaseHistory> histories = [
            SELECT CaseId, Field, OldValue, NewValue, CreatedDate
            FROM CaseHistory
            WHERE Field = 'Status' AND CreatedDate >= :sinceDate
            ORDER BY CaseId, CreatedDate
        ];

        Map<Id, Datetime> firstStatusChange = new Map<Id, Datetime>();
        Map<Id, StatusChangeMetadata> firstDAR = new Map<Id, StatusChangeMetadata>();

        for (CaseHistory ch : histories) {
            Id cid = ch.CaseId;

            if (!firstStatusChange.containsKey(cid)) {
                firstStatusChange.put(cid, ch.CreatedDate);
            }

            String newVal = String.valueOf(ch.NewValue)?.trim()?.toLowerCase();
            if (newVal == 'dealer action required' && !firstDAR.containsKey(cid)) {
                StatusChangeMetadata meta = new StatusChangeMetadata();
                meta.oldValue = String.valueOf(ch.OldValue);
                meta.newValue = String.valueOf(ch.NewValue);
                meta.timestamp = ch.CreatedDate;
                firstDAR.put(cid, meta);
            }
        }

        // Step 2: Filter to cases where DAR occurred within 7 days of earliest status change
        Map<Id, StatusChangeMetadata> filteredMetadata = new Map<Id, StatusChangeMetadata>();
        for (Id cid : firstDAR.keySet()) {
            if (!firstStatusChange.containsKey(cid)) continue;

            Integer delta = firstDAR.get(cid).timestamp.date().daysBetween(firstStatusChange.get(cid).date());
            if (delta >= 0 && delta <= 7) {
                filteredMetadata.put(cid, firstDAR.get(cid));
            }
        }

        if (filteredMetadata.isEmpty()) return '[]';

        Set<Id> caseIds = filteredMetadata.keySet();

        Map<Id, Case> caseMap = new Map<Id, Case>([
            SELECT Id, Subject, Description, Status, CreatedDate
            FROM Case
            WHERE Id IN :caseIds
        ]);

        Map<Id, List<CommentDTO>> commentsByCaseId = new Map<Id, List<CommentDTO>>();
        for (CaseComment cc : [
            SELECT Id, ParentId, CommentBody, CreatedDate
            FROM CaseComment
            WHERE ParentId IN :caseIds
        ]) {
            StatusChangeMetadata meta = filteredMetadata.get(cc.ParentId);
            if (meta != null && cc.CreatedDate <= meta.timestamp.addMinutes(10)) {
                CommentDTO dto = new CommentDTO();
                dto.id = cc.Id;
                dto.body = cc.CommentBody;
                dto.createdDate = cc.CreatedDate;

                if (!commentsByCaseId.containsKey(cc.ParentId)) {
                    commentsByCaseId.put(cc.ParentId, new List<CommentDTO>());
                }
                commentsByCaseId.get(cc.ParentId).add(dto);
            }
        }

        Map<Id, List<AttachmentDTO>> attachmentsByCaseId = new Map<Id, List<AttachmentDTO>>();
        for (Attachment att : [
            SELECT Id, ParentId, Name, ContentType, BodyLength, CreatedDate
            FROM Attachment
            WHERE ParentId IN :caseIds
        ]) {
            StatusChangeMetadata meta = filteredMetadata.get(att.ParentId);
            if (meta != null && att.CreatedDate <= meta.timestamp) {
                AttachmentDTO dto = new AttachmentDTO();
                dto.id = att.Id;
                dto.name = att.Name;
                dto.contentType = att.ContentType;
                dto.bodyLength = att.BodyLength;

                if (!attachmentsByCaseId.containsKey(att.ParentId)) {
                    attachmentsByCaseId.put(att.ParentId, new List<AttachmentDTO>());
                }
                attachmentsByCaseId.get(att.ParentId).add(dto);
            }
        }

        Map<Id, List<FileDTO>> filesByCaseId = new Map<Id, List<FileDTO>>();
        List<ContentDocumentLink> links = [
            SELECT ContentDocumentId, LinkedEntityId
            FROM ContentDocumentLink
            WHERE LinkedEntityId IN :caseIds
        ];

        Map<Id, Id> docIdToCaseId = new Map<Id, Id>();
        for (ContentDocumentLink link : links) {
            docIdToCaseId.put(link.ContentDocumentId, link.LinkedEntityId);
        }

        Map<Id, ContentDocument> docMap = new Map<Id, ContentDocument>([
            SELECT Id, LatestPublishedVersionId, Title, FileType
            FROM ContentDocument
            WHERE Id IN :docIdToCaseId.keySet()
        ]);

        Set<Id> versionIds = new Set<Id>();
        for (ContentDocument doc : docMap.values()) {
            if (doc.LatestPublishedVersionId != null) {
                versionIds.add(doc.LatestPublishedVersionId);
            }
        }

        Map<Id, ContentVersion> versionMap = new Map<Id, ContentVersion>([
            SELECT Id, ContentDocumentId, Title, FileType, ContentSize, CreatedDate
            FROM ContentVersion
            WHERE Id IN :versionIds
        ]);

        for (ContentVersion v : versionMap.values()) {
            Id caseId = docIdToCaseId.get(v.ContentDocumentId);
            StatusChangeMetadata meta = filteredMetadata.get(caseId);
            if (meta != null && v.CreatedDate <= meta.timestamp) {
                FileDTO dto = new FileDTO();
                dto.id = v.Id;
                dto.title = v.Title;
                dto.fileType = v.FileType;
                dto.contentSize = v.ContentSize;

                if (!filesByCaseId.containsKey(caseId)) {
                    filesByCaseId.put(caseId, new List<FileDTO>());
                }
                filesByCaseId.get(caseId).add(dto);
            }
        }

        List<DealerActionCaseDTO> results = new List<DealerActionCaseDTO>();

        for (Id caseId : caseIds) {
            Case c = caseMap.get(caseId);
            StatusChangeMetadata meta = filteredMetadata.get(caseId);
            if (c == null || meta == null) continue;

            DealerActionCaseDTO dto = new DealerActionCaseDTO();
            dto.id = c.Id;
            dto.subject = c.Subject;
            dto.description = c.Description;
            dto.status = c.Status;
            dto.createdDate = c.CreatedDate;
            dto.statusChangeOldValue = meta.oldValue;
            dto.statusChangeNewValue = meta.newValue;
            dto.statusChangeDate = meta.timestamp;

            if (commentsByCaseId.containsKey(caseId)) {
                dto.comments.addAll(commentsByCaseId.get(caseId));
            }
            if (attachmentsByCaseId.containsKey(caseId)) {
                dto.attachments.addAll(attachmentsByCaseId.get(caseId));
            }
            if (filesByCaseId.containsKey(caseId)) {
                dto.files.addAll(filesByCaseId.get(caseId));
            }

            results.add(dto);
        }

        return JSON.serializePretty(results);
    }
}

