public with sharing class CaseFullDetailsService {

    @InvocableMethod(label='Case Full Details as JSON')
    public static List<ExportResponse> exportCases(List<ExportRequest> requests) {
        if (requests == null || requests.isEmpty() || requests[0].sinceDays == null) {
            return new List<ExportResponse>{ new ExportResponse('[]') };
        }

        Date sinceDate = Date.today().addDays(-requests[0].sinceDays);
        String json = exportDealerActionCases(sinceDate);
        return new List<ExportResponse>{ new ExportResponse(json) };
    }

    public class ExportRequest {
        @InvocableVariable(label='Since Days')
        public Integer sinceDays;
    }

    public class ExportResponse {
        @InvocableVariable(label='Exported JSON')
        public String jsonOutput;
        public ExportResponse(String json) {
            this.jsonOutput = json;
        }
    }

    public class DealerActionCaseDTO {
        public Id caseId;
        public String subject;
        public String description;
        public String status;
        public String ownerName;
        public Datetime caseCreatedDate;

        public Datetime statusChangeDate;
        public String oldStatus;
        public String newStatus;

        public List<CommentDTO> comments = new List<CommentDTO>();
        public List<AttachmentDTO> attachments = new List<AttachmentDTO>();
        public List<FileDTO> files = new List<FileDTO>();
        public List<FeedDTO> feedEntries = new List<FeedDTO>();
    }

    public class CommentDTO {
        public Id id;
        public String body;
        public Datetime createdDate;
        public String createdByName;
    }

    public class AttachmentDTO {
        public Id id;
        public String name;
        public String contentType;
        public Integer bodyLength;
    }

    public class FileDTO {
        public Id id;
        public String title;
        public String fileType;
        public Integer contentSize;
    }

    public class FeedDTO {
        public Id id;
        public String type;
        public String body;
        public Datetime createdDate;
        public String createdByName;
    }

    private class StatusChangeMetadata {
        public String fromStatus;
        public String toStatus;
        public Datetime timestamp;
    }

    private static String exportDealerActionCases(Date sinceDate) {
        Map<Id, StatusChangeMetadata> firstDAR = new Map<Id, StatusChangeMetadata>();

        for (CaseHistory ch : [
            SELECT CaseId, Field, OldValue, NewValue, CreatedDate
            FROM CaseHistory
            WHERE Field = 'Status' AND CreatedDate >= :sinceDate
            ORDER BY CaseId, CreatedDate ASC
        ]) {
            String newStatus = String.valueOf(ch.NewValue)?.trim()?.toLowerCase();
            if (newStatus == 'dealer action required' && !firstDAR.containsKey(ch.CaseId)) {
                StatusChangeMetadata meta = new StatusChangeMetadata();
                meta.fromStatus = String.valueOf(ch.OldValue);
                meta.toStatus = String.valueOf(ch.NewValue);
                meta.timestamp = ch.CreatedDate;
                firstDAR.put(ch.CaseId, meta);
            }
        }

        if (firstDAR.isEmpty()) return '[]';

        Set<Id> caseIds = firstDAR.keySet();
        Map<Id, Case> caseMap = new Map<Id, Case>([
            SELECT Id, Subject, Description, Status, CreatedDate, Owner.Name
            FROM Case
            WHERE Id IN :caseIds
        ]);

        Map<Id, List<CommentDTO>> commentsByCase = new Map<Id, List<CommentDTO>>();
        for (CaseComment cc : [
            SELECT Id, ParentId, CommentBody, CreatedDate, CreatedBy.Name
            FROM CaseComment
            WHERE ParentId IN :caseIds
        ]) {
            StatusChangeMetadata meta = firstDAR.get(cc.ParentId);
            if (meta != null && cc.CreatedDate <= meta.timestamp) {
                CommentDTO dto = new CommentDTO();
                dto.id = cc.Id;
                dto.body = cc.CommentBody;
                dto.createdDate = cc.CreatedDate;
                dto.createdByName = cc.CreatedBy != null ? cc.CreatedBy.Name : null;

                if (!commentsByCase.containsKey(cc.ParentId)) {
                    commentsByCase.put(cc.ParentId, new List<CommentDTO>());
                }
                commentsByCase.get(cc.ParentId).add(dto);
            }
        }

        Map<Id, List<AttachmentDTO>> attachmentsByCase = new Map<Id, List<AttachmentDTO>>();
        for (Attachment att : [
            SELECT Id, ParentId, Name, ContentType, BodyLength
            FROM Attachment
            WHERE ParentId IN :caseIds
        ]) {
            AttachmentDTO dto = new AttachmentDTO();
            dto.id = att.Id;
            dto.name = att.Name;
            dto.contentType = att.ContentType;
            dto.bodyLength = att.BodyLength;

            if (!attachmentsByCase.containsKey(att.ParentId)) {
                attachmentsByCase.put(att.ParentId, new List<AttachmentDTO>());
            }
            attachmentsByCase.get(att.ParentId).add(dto);
        }

        Map<Id, List<FileDTO>> filesByCase = new Map<Id, List<FileDTO>>();
        Map<Id, Id> docToCase = new Map<Id, Id>();
        for (ContentDocumentLink link : [
            SELECT ContentDocumentId, LinkedEntityId
            FROM ContentDocumentLink
            WHERE LinkedEntityId IN :caseIds
        ]) {
            docToCase.put(link.ContentDocumentId, link.LinkedEntityId);
        }

        Map<Id, ContentDocument> docMap = new Map<Id, ContentDocument>([
            SELECT Id, LatestPublishedVersionId, Title, FileType
            FROM ContentDocument
            WHERE Id IN :docToCase.keySet()
        ]);

        Set<Id> versionIds = new Set<Id>();
        for (ContentDocument doc : docMap.values()) {
            if (doc.LatestPublishedVersionId != null) {
                versionIds.add(doc.LatestPublishedVersionId);
            }
        }

        Map<Id, ContentVersion> versionMap = new Map<Id, ContentVersion>([
            SELECT Id, ContentDocumentId, Title, FileType, ContentSize
            FROM ContentVersion
            WHERE Id IN :versionIds
        ]);

        for (ContentVersion ver : versionMap.values()) {
            Id caseId = docToCase.get(ver.ContentDocumentId);
            if (caseId != null) {
                FileDTO dto = new FileDTO();
                dto.id = ver.Id;
                dto.title = ver.Title;
                dto.fileType = ver.FileType;
                dto.contentSize = ver.ContentSize;

                if (!filesByCase.containsKey(caseId)) {
                    filesByCase.put(caseId, new List<FileDTO>());
                }
                filesByCase.get(caseId).add(dto);
            }
        }

        Map<Id, List<FeedDTO>> feedByCase = new Map<Id, List<FeedDTO>>();
        for (CaseFeed feed : [
            SELECT Id, ParentId, Type, Body, CreatedDate, CreatedBy.Name
            FROM CaseFeed
            WHERE ParentId IN :caseIds
        ]) {
            FeedDTO dto = new FeedDTO();
            dto.id = feed.Id;
            dto.type = feed.Type;
            dto.body = feed.Body;
            dto.createdDate = feed.CreatedDate;
            dto.createdByName = feed.CreatedBy != null ? feed.CreatedBy.Name : null;

            if (!feedByCase.containsKey(feed.ParentId)) {
                feedByCase.put(feed.ParentId, new List<FeedDTO>());
            }
            feedByCase.get(feed.ParentId).add(dto);
        }

        List<DealerActionCaseDTO> results = new List<DealerActionCaseDTO>();
        for (Id cid : caseIds) {
            Case c = caseMap.get(cid);
            StatusChangeMetadata meta = firstDAR.get(cid);
            if (c == null || meta == null) continue;

            DealerActionCaseDTO dto = new DealerActionCaseDTO();
            dto.caseId = c.Id;
            dto.subject = c.Subject;
            dto.description = c.Description;
            dto.status = c.Status;
            dto.ownerName = (c.Owner != null) ? c.Owner.Name : null;
            dto.caseCreatedDate = c.CreatedDate;
            dto.statusChangeDate = meta.timestamp;
            dto.oldStatus = meta.fromStatus;
            dto.newStatus = meta.toStatus;

            dto.comments = commentsByCase.containsKey(cid) ? commentsByCase.get(cid) : new List<CommentDTO>();
            dto.attachments = attachmentsByCase.containsKey(cid) ? attachmentsByCase.get(cid) : new List<AttachmentDTO>();
            dto.files = filesByCase.containsKey(cid) ? filesByCase.get(cid) : new List<FileDTO>();
            dto.feedEntries = feedByCase.containsKey(cid) ? feedByCase.get(cid) : new List<FeedDTO>();

            results.add(dto);
        }

        return JSON.serializePretty(results);
    }
}
